openapi: 3.0.0
info:
  title: API de Gestão de ONG Eco Patinhas
  version: 1.0.0
  description: API para gerenciamento de usuários, doações, vendas e castrações com autenticação JWT.
  
servers:
  - url: http://localhost:5000/api
    description: Servidor local

tags:
  - name: Users
    description: Operações relacionadas a usuários
  - name: Donations
    description: Operações relacionadas às doações
  - name: CashDonations
    description: Operações relacionadas às doações em dinheiro
  - name: Sales
    description: Operações relacionadas às vendas das tampinhas
  - name: Castrations
    description: Operações relacionadas às castrações
  - name: MiscExpenses
    description: Operações relacionadas a gastos diversos da ONG
  - name: Reports
    description: Operações relacionadas aos relatórios


paths:
  /users:
    post:
      tags:
        - Users
      summary: Criação de usuário
      description: Cria um novo usuário.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateSchema'
      responses:
        '201':
          description: Usuário criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        '400':
          description: Email já está em uso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Email already in use

  /token:
    post:
      tags:
       - Users
      summary: Geração de Token JWT
      description: Gera um token JWT para o usuário autenticado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin@admin.com
                hashed_password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Token JWT gerado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  token_type:
                    type: string
                    example: bearer
        '400':
          description: Requisição inválida (JSON esperado).
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Invalid request, JSON data expected
        '401':
          description: Credenciais inválidas.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Invalid Credentials

  /users/me:
    get:
      tags:
        - Users
      summary: Informações do usuário atual
      description: Obtém as informações do usuário autenticado.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Informações do usuário autenticado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        '404':
          description: Usuário não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: User not found
        '401':
          description: Token JWT inválido ou ausente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Missing Authorization Header

  /logout:
    post:
      tags:
        - Users
      summary: Efetua o logout e revoga o token JWT
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout realizado com sucesso. O token foi revogado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Logout realizado com sucesso. Token revogado."
        "401":
          description: Token inválido ou não fornecido

  /donations:
    get:
      tags:
        - Donations
      summary: Listar todas as doações com filtros
      description: Lista todas as doações com filtros opcionais (doador, data, quantidade).
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: donor_name
          schema:
            type: string
          description: Nome do doador
        - in: query
          name: donation_date
          schema:
            type: string
            format: date
          description: Data da doação (AAAA-MM-DD)
        - in: query
          name: quantity
          schema:
            type: number
          description: Quantidade de tampinhas doadas
      responses:
        '200':
          description: Lista de doações.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DonationSchema'

    post:
      tags:
        - Donations
      summary: Registrar uma nova doação
      description: Adiciona uma nova doação ao sistema.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationCreateSchema'
      responses:
        '201':
          description: Doação registrada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationSchema'

  /donations/{donationId}:
    get:
      tags:
        - Donations
      summary: Obter uma doação específica
      description: Retorna os detalhes de uma doação específica.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: donationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da doação
      responses:
        '200':
          description: Detalhes da doação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationSchema'
        '404':
          description: Doação não encontrada.

    put:
      tags:
        - Donations
      summary: Atualizar uma doação
      description: Atualiza os detalhes de uma doação existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: donationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da doação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationCreateSchema'
      responses:
        '200':
          description: Doação atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationSchema'

    delete:
      tags:
        - Donations
      summary: Deletar uma doação
      description: Remove uma doação existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: donationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da doação
      responses:
        '204':
          description: Doação deletada com sucesso.
        '404':
          description: Doação não encontrada.

  /cash-donations:
    get:
      tags:
        - CashDonations
      summary: Listar todas as doações em dinheiro com filtros
      description: Lista todas as doações em dinheiro com filtros opcionais (nome do doador, data, valor).
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: donor_name
          schema:
            type: string
          description: Nome do doador
        - in: query
          name: donation_date
          schema:
            type: string
            format: date
          description: Data da doação (AAAA-MM-DD)
        - in: query
          name: quantity
          schema:
            type: number
          description: Valor doado
      responses:
        '200':
          description: Lista de doações em dinheiro.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DonationSchema'

    post:
      tags:
        - CashDonations
      summary: Registrar uma nova doação em dinheiro
      description: Registra uma nova doação em dinheiro no sistema.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationCreateSchema'
      responses:
        '201':
          description: Doação registrada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationSchema'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Campo obrigatório 'donor_name' está ausente ou vazio.

  /cash-donations/{donationId}:
    get:
      tags:
        - CashDonations
      summary: Obter detalhes de uma doação em dinheiro
      description: Retorna os detalhes de uma doação em dinheiro pelo ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: donationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da doação
      responses:
        '200':
          description: Detalhes da doação em dinheiro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationSchema'
        '404':
          description: Doação não encontrada.

    put:
      tags:
        - CashDonations
      summary: Atualizar uma doação em dinheiro
      description: Atualiza os dados de uma doação em dinheiro existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: donationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da doação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationCreateSchema'
      responses:
        '200':
          description: Doação em dinheiro atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationSchema'
        '400':
          description: Valor inválido.

    delete:
      tags:
        - CashDonations
      summary: Deletar uma doação em dinheiro
      description: Remove uma doação em dinheiro existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: donationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da doação
      responses:
        '204':
          description: Doação deletada com sucesso.
        '404':
          description: Doação não encontrada.
        '400':
          description: Não é possível excluir a doação.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Você não pode excluir essa doação, pois o valor restante ficaria menor do que o montante já gasto.


  /sales:
    get:
      tags:
        - Sales
      summary: Listar todas as vendas com filtros
      description: Lista todas as vendas com filtros opcionais (comprador, data, quantidade).
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: buyer_name
          schema:
            type: string
          description: Nome do comprador
        - in: query
          name: sale_date
          schema:
            type: string
            format: date
          description: Data da venda (AAAA-MM-DD)
        - in: query
          name: quantity_sold
          schema:
            type: number
          description: Quantidade de tampinhas vendidas
      responses:
        '200':
          description: Lista de vendas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SaleSchema'

    post:
      tags:
        - Sales
      summary: Registrar uma nova venda
      description: Adiciona uma nova venda de tampinhas ao sistema.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleCreateSchema'
      responses:
        '201':
          description: Venda registrada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleSchema'

  /sales/{saleId}:
    get:
      tags:
        - Sales
      summary: Obter uma venda específica
      description: Retorna os detalhes de uma venda específica.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: saleId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da venda
      responses:
        '200':
          description: Detalhes da venda.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleSchema'
        '404':
          description: Venda não encontrada.

    put:
      tags:
        - Sales
      summary: Atualizar uma venda
      description: Atualiza os detalhes de uma venda existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: saleId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da venda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleCreateSchema'
      responses:
        '200':
          description: Venda atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleSchema'

    delete:
      tags:
        - Sales
      summary: Deletar uma venda
      description: Remove uma venda existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: saleId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da venda
      responses:
        '204':
          description: Venda deletada com sucesso.
        '404':
          description: Venda não encontrada.

  /castrations:
    get:
      tags:
        - Castrations
      summary: Listar todas as castrações com filtros
      description: Lista todas as castrações com filtros opcionais (nome do animal, data, clínica).
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: animal_name
          schema:
            type: string
          description: Nome do animal
        - in: query
          name: neutering_date
          schema:
            type: string
            format: date
          description: Data da castração (AAAA-MM-DD)
        - in: query
          name: clinic_name_or_veterinary_name
          schema:
            type: string
          description: Nome da clínica
      responses:
        '200':
          description: Lista de castrações.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CastrationSchema'

    post:
      tags:
        - Castrations
      summary: Registrar uma nova castração
      description: Adiciona uma nova castração ao sistema.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CastrationCreateSchema'
      responses:
        '201':
          description: Castração registrada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastrationSchema'

  /castrations/{castrationId}:
    get:
      tags:
        - Castrations
      summary: Obter uma castração específica
      description: Retorna os detalhes de uma castração específica.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: castrationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da castração
      responses:
        '200':
          description: Detalhes da castração.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastrationSchema'
        '404':
          description: Castração não encontrada.

    put:
      tags:
        - Castrations
      summary: Atualizar uma castração
      description: Atualiza os detalhes de uma castração existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: castrationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da castração
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CastrationCreateSchema'
      responses:
        '200':
          description: Castração atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastrationSchema'

    delete:
      tags:
        - Castrations
      summary: Deletar uma castração
      description: Remove uma castração existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: castrationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID da castração
      responses:
        '204':
          description: Castração deletada com sucesso.
        '404':
          description: Castração não encontrada.
  /misc-expenses:
    get:
      tags:
        - MiscExpenses
      summary: Listar todos os gastos diversos
      description: Lista todos os gastos diversos com filtros opcionais.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: description
          schema:
            type: string
          description: Descrição da despesa
        - in: query
          name: expense_date
          schema:
            type: string
            format: date
          description: Data da despesa (AAAA-MM-DD)
      responses:
        '200':
          description: Lista de gastos diversos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MiscExpenseSchema'

    post:
      tags:
        - MiscExpenses
      summary: Registrar novo gasto diverso
      description: Registra um novo gasto diverso no sistema.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MiscExpenseCreateSchema'
      responses:
        '201':
          description: Gasto registrado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscExpenseSchema'
        '400':
          description: Dados inválidos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Campo obrigatório 'description' está ausente ou vazio.

  /misc-expenses/{expenseId}:
    get:
      tags:
        - MiscExpenses
      summary: Obter gasto específico
      description: Retorna os detalhes de um gasto específico.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
            format: uuid
          description: ID do gasto
      responses:
        '200':
          description: Detalhes do gasto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscExpenseSchema'
        '404':
          description: Gasto não encontrado.

    put:
      tags:
        - MiscExpenses
      summary: Atualizar um gasto
      description: Atualiza os dados de um gasto existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
            format: uuid
          description: ID do gasto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MiscExpenseCreateSchema'
      responses:
        '200':
          description: Gasto atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscExpenseSchema'
        '400':
          description: Dados inválidos.

    delete:
      tags:
        - MiscExpenses
      summary: Deletar um gasto
      description: Remove um gasto existente.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
            format: uuid
          description: ID do gasto
      responses:
        '204':
          description: Gasto deletado com sucesso.
        '404':
          description: Gasto não encontrado.

  /reports:
    get:
      summary: Listar relatório com filtros
      description: >
        Lista todos os registros do relatório financeiro, incluindo dados consolidados de doações (tampinhas e dinheiro),
        vendas, castrações e gastos diversos. Pode ser filtrado por período.
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          description: Data de início para o filtro (AAAA-MM-DD)
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          description: Data de fim para o filtro (AAAA-MM-DD)
      responses:
        '200':
          description: Lista de relatórios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportSchema'
        '400':
          description: Data inválida fornecida.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Invalid date format. Expected YYYY-MM-DD.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserCreateSchema:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        date_of_birth:
          type: string
          format: date
          example: 1990-01-01
        hashed_password:
          type: string
          example: password123

    UserSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        date_of_birth:
          type: string
          format: date
          example: 1990-01-01
        date_created:
          type: string
          format: date-time
          example: 2024-10-19T16:17:00Z
        date_last_updated:
          type: string
          format: date-time
          example: 2024-10-19T16:17:00Z

    DonationCreateSchema:
      type: object
      properties:
        donor_name:
          type: string
          example: Jane Doe
        donation_date:
          type: string
          format: date-time
          example: 2024-10-20T12:00:00Z
        quantity:
          type: number
          example: 1000

    DonationSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        donor_name:
          type: string
          example: Jane Doe
        donation_date:
          type: string
          format: date-time
          example: 2024-10-20T12:00:00Z
        quantity:
          type: number
          example: 1000

    SaleCreateSchema:
      type: object
      properties:
        buyer_name:
          type: string
          example: Company ABC
        sale_date:
          type: string
          format: date-time
          example: 2024-10-21T12:00:00Z
        quantity_sold:
          type: number
          example: 1000
        total_value:
          type: number
          format: float
          example: 500.00

    SaleSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        buyer_name:
          type: string
          example: Company ABC
        sale_date:
          type: string
          format: date-time
          example: 2024-10-21T12:00:00Z
        quantity_sold:
          type: number
          example: 1000
        total_value:
          type: number
          format: float
          example: 500.00

    CastrationCreateSchema:
      type: object
      properties:
        animal_name:
          type: string
          example: Rex
        neutering_date:
          type: string
          format: date-time
          example: 2024-10-22T12:00:00Z
        clinic_name_or_veterinary_name:
          type: string
          example: Vet Clinic XYZ
        cost:
          type: number
          format: float
          example: 200.00

    CastrationSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        animal_name:
          type: string
          example: Rex
        neutering_date:
          type: string
          format: date-time
          example: 2024-10-22T12:00:00Z
        clinic_name_or_veterinary_name:
          type: string
          example: Vet Clinic XYZ
        cost:
          type: number
          format: float
          example: 200.00
    ReportSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
        donation_id:
          type: string
          format: uuid
        donation:
          type: number
          format: float
        sale_id:
          type: string
          format: uuid
        sale_qtd_sold:
          type: number
          format: float
        sale_value:
          type: number
          format: float
        castration_id:
          type: string
          format: uuid
        castration_value:
          type: number
          format: float
        misc_expense_id:
          type: string
          format: uuid
          example: "789e4567-e89b-12d3-a456-426614174999"
        misc_expense_value:
          type: number
          format: float
          example: 85.50
        date_created:
          type: string
          format: date
          example: "2024-10-01"

    MiscExpenseCreateSchema:
      type: object
      properties:
        description:
          type: string
          example: Compra de ração emergencial
        expense_date:
          type: string
          format: date-time
          example: 2024-10-23T14:30:00Z
        value:
          type: number
          format: float
          example: 150.00

    MiscExpenseSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "456e1234-e89b-12d3-a456-426614174111"
        description:
          type: string
          example: Compra de ração emergencial
        expense_date:
          type: string
          format: date-time
          example: 2024-10-23T14:30:00Z
        value:
          type: number
          format: float
          example: 150.00
        created_at:
          type: string
          format: date-time
          example: 2024-10-23T14:31:00Z
        updated_at:
          type: string
          format: date-time
          example: 2024-10-23T14:35:00Z
